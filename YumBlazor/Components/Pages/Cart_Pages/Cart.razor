@page "/cart"

@using Microsoft.AspNetCore.Authorization
@using System.Globalization

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IShoppingCartRepository _shoppingCartRepository

@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt"Loading..." />
    </div>
}
else
{
    <div class="row w-100">
        <div class="col-lg-6 col-12">
            <div class="container p-4 m-2">
                <h4 class="text-center text-success display-6">
                    Cart Summary
                </h4>

                @foreach (var cartItem in ShoppingCarts)
                {
                    <div class="d-flex p-2 m-2">
                        <div class="card flex-row w-100">
                            <img class="card-img-left" style="width: 120px;" src="@(cartItem.Product.ImageUrl ?? "/images/default.png")">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h4 class="">
                                        @cartItem.Product.Name
                                    </h4>
                                    <h4>
                                        @cartItem.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-DK"))
                                    </h4>
                                </div>
                                <div class="flex-fill">
                                    <h4 class="text-danger">
                                        @((cartItem.Product.Price * cartItem.Count).ToString("C", CultureInfo.GetCultureInfo("en-DK")))
                                    </h4>
                                </div>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="d-flex justify-content-between g-0">
                                        <span @onclick="()=>UpdateCartItem(cartItem.ProductId, -1)">
                                            <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                                        </span>
                                        <span class="ml-1 me-1">
                                            <b class="lead">@cartItem.Count</b>
                                        </span>
                                        <span @onclick="()=>UpdateCartItem(cartItem.ProductId, +1)">
                                            <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                                        </span>
                                    </div>
                                    <button class="btn btn-danger"
                                            @onclick="()=>UpdateCartItem(cartItem.ProductId, -10000)">
                                        Remove
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-lg-6 col-12 p-4">
            <div class="card">
                <div class="card-header text-success text-center display-6">
                    Pickup Details
                </div>

                <EditForm Model="OrderHeader" FormName="CartForm" OnValidSubmit="ProcessOrderCreation">
                    <DataAnnotationsValidator/>

                    <div class="card-body">
                        <div class="form-group">
                            <label>Name</label>
                            <InputText @bind-bind-Value="OrderHeader.Name" type="text" class="form-control" />
                            <ValidationMessage For="@(() => OrderHeader.Name)" />
                        </div>
                        <div class="form-group">
                            <label>Email</label>
                            <InputText @bind-bind-Value="OrderHeader.Email" type="text" class="form-control" />
                            <ValidationMessage For="@(() => OrderHeader.Email)" />
                        </div>
                        <div class="form-group">
                            <label>Phone</label>
                            <InputText @bind-bind-Value="OrderHeader.PhoneNumber" type="text" class="form-control" />
                            <ValidationMessage For="@(() => OrderHeader.PhoneNumber)" />
                        </div>

                        <div class="card mt-4 bg-light">
                            <div class="card-body">
                                <h4>
                                    Grand Total: @OrderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-DK"))
                                </h4>
                                <h4>
                                    No. of Items: @TotalItems
                                </h4>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-success m-4">
                        Looks Good? Place Order!
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<ShoppingCart> ShoppingCarts = new List<ShoppingCart>();
    private bool IsProcessing { get; set; } = true;

    [SupplyParameterFromForm]
    public OrderHeader OrderHeader { get; set; } = new OrderHeader();

    private int TotalItems { get; set; } = 0;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCart()
    {
        // Get the userId - So that only cart products from that specific user is shown.
        // Asynchronously gets an AuthenticationState that describes the current user.

        /* AuthenticationState
        * Accessing User Information: If a user is authenticated, you can access their -
        *  identity, claims, and roles using the User property of the AuthenticationState object. -
        *  This allows you to customize your application's behavior based -
        *  on the user's specific information.
        */
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();

        // I can use this to get for example User.Claims, User.Identity
        var user = authState.User;

        // Returns an IEnumerable List of ShoppingCart (Kinda) ?
        /*
        * Overall, the code does the following:
        * It retrieves the user's identifier from the user object.
        * It calls the GetAllAsync method on the _shoppingCartRepository object, passing the user's identifier as a parameter.
        * It assigns the retrieved shopping carts to the ShoppingCarts variable.
        */
        ShoppingCarts = await _shoppingCartRepository
        .GetAllAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
    }

    private async Task UpdateCartItem(int productId, int updateByCount)
    {
        // Get the User
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        // var user1 = authState.User.Identity.Name; // Just for testing
        var user = authState.User;

        var result = await
        _shoppingCartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, productId, updateByCount);
        await LoadCart();
    }

    private async Task ProcessOrderCreation()
    {
        
    }
}